---
import { readFile } from 'node:fs/promises'
import { convertMDXToHTML } from '~/utils/mdxToHtml'
import { languages } from '~/i18n'
import {
  useTranslations,
  validateLang
} from '~/i18n/utils'
import { Picture } from 'astro:assets'
import Layout from '~/layouts/Layout.astro'
import { getCollection, type CollectionEntry } from 'astro:content'
import { slugify } from '~/utils'
import sanitizeHtml from 'sanitize-html'
import MetaOGImage from '~/components/MetaOGImage.astro'
import { DateTime } from 'luxon'

export async function getStaticPaths (): Promise<Array<{ params: { lang: string, slug: string }, props: { post: CollectionEntry<'blog'> } }>> {
  const blogEntries = await getCollection('blog')
  return Object.keys(languages).flatMap(lang => {
    return blogEntries
      .filter(entry => entry.id.split('/')[0] === lang)
      .map(entry => ({
        params: { slug: slugify(entry.id), lang },
        props: { post: entry }
      }))
  })
}
interface Props {
  post: CollectionEntry<'blog'>
}

// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
const { post } = Astro.props as Props
const { Content } = await post.render()
const { lang } = Astro.params
validateLang(lang)
const t = useTranslations(lang)

const truncatedPost = sanitizeHtml(await convertMDXToHTML(post.body, 297), { allowedTags: [] })

const imageFilePath = (post.data.image != null && Object.hasOwn(post.data.image, 'fsPath')) ? (post.data.image as unknown as {
  fsPath: string
}).fsPath : ''
const image = imageFilePath != null ? await readFile(imageFilePath) : undefined
const date = DateTime.fromJSDate(post.data.date).setLocale(languages[lang].code)

const formattedAbsoluteDate = date.toLocaleString(DateTime.DATE_FULL)
---

<Layout title={post.data.title} description={post.data.description ?? `${truncatedPost}...`}>
    <Fragment slot="head">
        <meta property="og:type" content="article"/>
      {
        (image != null)
          ?
                <MetaOGImage title={post.data.title}
                             description={post.data.description ?? truncatedPost}
                             author="TimothÃ©e Rebours"
                             date={post.data.date}
                             dateFormat={lang}
                             image={image}
                />
          :
                <></>
      }
    </Fragment>
    <div class="space-y-2 mb-2">
        <h1 class="text-5xl font-medium text-center">{post.data.title}</h1>
        <p class="text-gray-500 text-center" title={formattedAbsoluteDate} x-data={`formatDate("${post.data.date.toString()}", "${languages[lang].code}", false)`}>
            {t('blog.published')}<span x-text="formattedDate">{`${lang === 'fr' ? 'le' : 'on'} ${formattedAbsoluteDate}`}</span>
        </p>
    </div>
    <div class="max-h-60 md:max-h-72 lg:max-h-96 overflow-hidden flex items-center justify-center">
      {(post.data.image != null)
        ? (
                      <Picture src={post.data.image} alt={post.data.alt} width="1920"/>)
        : (
                      <div class="h-12"></div>)}
    </div>
    <main class="min-h-[70vh] sm:mx-auto sm:-mt-12 sm:mb-12 sm:shadow-2xl px-6 py-12 z-10 bg-white relative md:max-w-3xl lg:max-w-4xl">
        <div class="mx-auto text-justify prose lg:prose-lg prose-slate prose-headings:scroll-mt-20 [&_h1>a]:no-underline [&_h2>a]:no-underline [&_h3>a]:no-underline [&_h4>a]:no-underline [&_h5>a]:no-underline [&_h6>a]:no-underline">
            <Content/>
        </div>
    </main>
</Layout>
