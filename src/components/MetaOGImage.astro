---
import { createHash } from 'node:crypto'
import path from 'node:path'
import { writeFile, mkdir } from 'node:fs/promises'
import { existsSync } from 'node:fs'
import AstroConfig, { PWD } from '../../astro.config'
import { PNG } from '~/utils/createImage'
import ogImage from './og-image'

export interface Props {
  title: string
  description: string
  image: ArrayBuffer
  width?: number
  height?: number
  author?: string
  date?: Date
}

const {
  title,
  description,
  image,
  author,
  date,
  width = 1200,
  height = 630
} = Astro.props

const generateHash = (input: string): string => {
  const hash = createHash('sha256')
  hash.update(input)
  return hash.digest().toString('hex')
}

const publicDir = path.resolve(PWD, AstroConfig.publicDir ?? 'public')
const ogDir = path.resolve(publicDir, 'og')

if (!(existsSync(ogDir))) await mkdir(ogDir)

const options = { image: Buffer.from(image), title, description, author, date, width, height }

const hash = generateHash(JSON.stringify({ ...options, image: options.image.toString('base64') }))

const generatedImagePath = path.resolve(publicDir, 'og', `${hash}.png`)
const generatedImageUrl = `${Astro.site?.toString() ?? '/'}og/${hash}.png`

if (!(existsSync(generatedImagePath))) {
  const generatedImage = await PNG(await ogImage(options))
  await writeFile(generatedImagePath, generatedImage)
}

---
<meta property="og:image" content={generatedImageUrl}/>
<meta property="og:image:type" content="image/png"/>
<meta property="og:image:width" content={width.toString()}/>
<meta property="og:image:height" content={height.toString()}/>
